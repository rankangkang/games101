{
  "version": 3,
  "sources": ["../src/config.ts", "../src/db/idb.ts", "../src/db/index.ts", "../src/sw.ts"],
  "sourcesContent": ["import type { IDBOptions } from './db/idb'\n\nexport const SERVICE_WORKER_PATH = '/sw.js'\nexport const ASSIGNMENTS_BASE_PREFIX = '/_assignments/'\n\nexport const IDB_OPTIONS: IDBOptions = {\n  name: 'games101',\n  storeName: 'games101_assignments_storage',\n  version: 1,\n}\n\nexport const ROUTE_BASE_NAME = '/games101'\n", "import type { FileModel } from '../types'\n\n// \u5C01\u88C5\u4E00\u5957\u7C7B\u4F3C localforage \u7684 indexedDB \u64CD\u4F5C\nexport interface IDBOptions {\n  name: string\n  storeName: string\n  version: number\n}\n\nexport class IDBStore {\n  private db: IDBDatabase | null = null\n  private name: string\n  private storeName: string\n  private version: number\n\n  constructor(options: IDBOptions) {\n    this.name = options.name\n    this.storeName = options.storeName\n    this.version = options.version\n  }\n\n  async getDB(): Promise<IDBDatabase> {\n    if (this.db) return this.db\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.name, this.version)\n\n      request.onerror = () => reject(request.error)\n\n      request.onsuccess = () => {\n        this.db = request.result\n        resolve(request.result)\n      }\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          db.createObjectStore(this.storeName)\n        }\n      }\n    })\n  }\n\n  async setItem<T>(key: string, value: T): Promise<void> {\n    const db = await this.getDB()\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, 'readwrite')\n      const store = transaction.objectStore(this.storeName)\n      const request = store.put(value, key)\n\n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async getItem<T>(key: string): Promise<T | null> {\n    const db = await this.getDB()\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, 'readonly')\n      const store = transaction.objectStore(this.storeName)\n      const request = store.get(key)\n\n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve(request.result)\n    })\n  }\n\n  async removeItem(key: string): Promise<void> {\n    const db = await this.getDB()\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, 'readwrite')\n      const store = transaction.objectStore(this.storeName)\n      const request = store.delete(key)\n\n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async clear(): Promise<void> {\n    const db = await this.getDB()\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, 'readwrite')\n      const store = transaction.objectStore(this.storeName)\n      const request = store.clear()\n\n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async keys(): Promise<string[]> {\n    const db = await this.getDB()\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, 'readonly')\n      const store = transaction.objectStore(this.storeName)\n      const request = store.getAllKeys()\n\n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve(request.result as string[])\n    })\n  }\n\n  async setFileModel(key: string, value: FileModel): Promise<void> {\n    return this.setItem(key, value)\n  }\n\n  async getFileModel(key: string): Promise<FileModel | null> {\n    return this.getItem<FileModel>(key)\n  }\n}\n", "import { IDB_OPTIONS } from '../config'\nimport type { FileModel } from '../types'\nimport { join } from '../utils/path'\nimport { IDBStore } from './idb'\n\nexport const idb = new IDBStore(IDB_OPTIONS)\n\n/**\n * \u540C\u6B65\u6587\u4EF6\u6A21\u578B\n * @param defaultModels \u9ED8\u8BA4\u6587\u4EF6\u6A21\u578B\n * @returns \u6587\u4EF6\u6A21\u578B\n */\nexport async function syncFileModels(defaultModels: FileModel[]) {\n  return Promise.all(\n    defaultModels.map(async (item) => {\n      const key = join(item.baseUrl, item.path)\n      let model = await idb.getFileModel(key)\n      if (!model) {\n        model = item\n        await idb.setFileModel(key, model)\n      }\n      return model\n    }),\n  )\n}\n", "/// <reference lib=\"webworker\" />\n\nimport { ASSIGNMENTS_BASE_PREFIX } from './config'\nimport { idb } from './db'\n\ndeclare const self: ServiceWorkerGlobalScope\n\n// \u76D1\u542C\u5B89\u88C5\u4E8B\u4EF6\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installed')\n  event.waitUntil(\n    idb.getDB().then(() => {\n      console.log('service worker db init success')\n    }),\n  )\n})\n\n// \u76D1\u542C\u6FC0\u6D3B\u4E8B\u4EF6\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activated')\n  // \u7ACB\u5373\u63A5\u7BA1\u6240\u6709\u5BA2\u6237\u7AEF\uFF0C\u4E0D\u7B49\u5F85\u5237\u65B0\n  event.waitUntil(self.clients.claim())\n})\n\n// \u76D1\u542C fetch \u4E8B\u4EF6\nself.addEventListener('fetch', (event) => {\n  // \u53EA\u5904\u7406 GET \u8BF7\u6C42\n  if (event.request.method !== 'GET') {\n    return\n  }\n\n  // \u89E3\u6790 URL \u83B7\u53D6 pathname\n  const url = new URL(event.request.url)\n  const pathname = url.pathname\n\n  if (!pathname.startsWith(ASSIGNMENTS_BASE_PREFIX)) {\n    return\n  }\n\n  // \u8C03\u8BD5\u4FE1\u606F\uFF1A\u6253\u5370\u6240\u6709\u8BF7\u6C42\n  console.log('Service Worker intercepted request', {\n    url: event.request.url,\n    pathname,\n    clientId: event.clientId,\n    frameType: event.request.mode,\n    destination: event.request.destination,\n    referrer: event.request.referrer,\n  })\n\n  // NOTE: \u5728\u5F02\u6B65\u64CD\u4F5C\u4E4B\u524D\u8C03\u7528 respondWith\uFF0C\u5426\u5219\u4F1A\u62A5\u9519\n  event.respondWith(\n    (async () => {\n      try {\n        // \u4ECE IndexedDB \u4E2D\u83B7\u53D6\u7F13\u5B58\u7684\u54CD\u5E94\n        const value = await idb.getFileModel(pathname)\n        if (value) {\n          console.log('Returning cached response for:', event.request.url)\n          return new Response(value.value, {\n            headers: {\n              'Content-Type': value.type || 'text/plain',\n            },\n          })\n        } else {\n          console.log('Fetching from network:', event.request.url)\n          return fetch(event.request)\n        }\n      } catch (error) {\n        console.error('Error in fetch handler:', error)\n        return fetch(event.request)\n      }\n    })(),\n  )\n})\n"],
  "mappings": "MAGO,IAAMA,EAA0B,iBAE1BC,EAA0B,CACrC,KAAM,WACN,UAAW,+BACX,QAAS,CACX,ECAO,IAAMC,EAAN,KAAe,CACZ,GAAyB,KACzB,KACA,UACA,QAER,YAAYC,EAAqB,CAC/B,KAAK,KAAOA,EAAQ,KACpB,KAAK,UAAYA,EAAQ,UACzB,KAAK,QAAUA,EAAQ,OACzB,CAEA,MAAM,OAA8B,CAClC,OAAI,KAAK,GAAW,KAAK,GAElB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAU,UAAU,KAAK,KAAK,KAAM,KAAK,OAAO,EAEtDA,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,EAE5CA,EAAQ,UAAY,IAAM,CACxB,KAAK,GAAKA,EAAQ,OAClBF,EAAQE,EAAQ,MAAM,CACxB,EAEAA,EAAQ,gBAAmBC,GAAU,CACnC,IAAMC,EAAMD,EAAM,OAA4B,OACzCC,EAAG,iBAAiB,SAAS,KAAK,SAAS,GAC9CA,EAAG,kBAAkB,KAAK,SAAS,CAEvC,CACF,CAAC,CACH,CAEA,MAAM,QAAWC,EAAaC,EAAyB,CACrD,IAAMF,EAAK,MAAM,KAAK,MAAM,EAC5B,OAAO,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGtC,IAAMC,EAFcE,EAAG,YAAY,KAAK,UAAW,WAAW,EACpC,YAAY,KAAK,SAAS,EAC9B,IAAIE,EAAOD,CAAG,EAEpCH,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,EAC5CA,EAAQ,UAAY,IAAMF,EAAQ,CACpC,CAAC,CACH,CAEA,MAAM,QAAWK,EAAgC,CAC/C,IAAMD,EAAK,MAAM,KAAK,MAAM,EAC5B,OAAO,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGtC,IAAMC,EAFcE,EAAG,YAAY,KAAK,UAAW,UAAU,EACnC,YAAY,KAAK,SAAS,EAC9B,IAAIC,CAAG,EAE7BH,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,EAC5CA,EAAQ,UAAY,IAAMF,EAAQE,EAAQ,MAAM,CAClD,CAAC,CACH,CAEA,MAAM,WAAWG,EAA4B,CAC3C,IAAMD,EAAK,MAAM,KAAK,MAAM,EAC5B,OAAO,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGtC,IAAMC,EAFcE,EAAG,YAAY,KAAK,UAAW,WAAW,EACpC,YAAY,KAAK,SAAS,EAC9B,OAAOC,CAAG,EAEhCH,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,EAC5CA,EAAQ,UAAY,IAAMF,EAAQ,CACpC,CAAC,CACH,CAEA,MAAM,OAAuB,CAC3B,IAAMI,EAAK,MAAM,KAAK,MAAM,EAC5B,OAAO,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGtC,IAAMC,EAFcE,EAAG,YAAY,KAAK,UAAW,WAAW,EACpC,YAAY,KAAK,SAAS,EAC9B,MAAM,EAE5BF,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,EAC5CA,EAAQ,UAAY,IAAMF,EAAQ,CACpC,CAAC,CACH,CAEA,MAAM,MAA0B,CAC9B,IAAMI,EAAK,MAAM,KAAK,MAAM,EAC5B,OAAO,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGtC,IAAMC,EAFcE,EAAG,YAAY,KAAK,UAAW,UAAU,EACnC,YAAY,KAAK,SAAS,EAC9B,WAAW,EAEjCF,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,EAC5CA,EAAQ,UAAY,IAAMF,EAAQE,EAAQ,MAAkB,CAC9D,CAAC,CACH,CAEA,MAAM,aAAaG,EAAaC,EAAiC,CAC/D,OAAO,KAAK,QAAQD,EAAKC,CAAK,CAChC,CAEA,MAAM,aAAaD,EAAwC,CACzD,OAAO,KAAK,QAAmBA,CAAG,CACpC,CACF,ECzGO,IAAME,EAAM,IAAIC,EAASC,CAAW,ECG3C,KAAK,iBAAiB,UAAYC,GAAU,CAC1C,QAAQ,IAAI,0BAA0B,EACtCA,EAAM,UACJC,EAAI,MAAM,EAAE,KAAK,IAAM,CACrB,QAAQ,IAAI,gCAAgC,CAC9C,CAAC,CACH,CACF,CAAC,EAGD,KAAK,iBAAiB,WAAaD,GAAU,CAC3C,QAAQ,IAAI,0BAA0B,EAEtCA,EAAM,UAAU,KAAK,QAAQ,MAAM,CAAC,CACtC,CAAC,EAGD,KAAK,iBAAiB,QAAUA,GAAU,CAExC,GAAIA,EAAM,QAAQ,SAAW,MAC3B,OAKF,IAAME,EADM,IAAI,IAAIF,EAAM,QAAQ,GAAG,EAChB,SAEhBE,EAAS,WAAWC,CAAuB,IAKhD,QAAQ,IAAI,qCAAsC,CAChD,IAAKH,EAAM,QAAQ,IACnB,SAAAE,EACA,SAAUF,EAAM,SAChB,UAAWA,EAAM,QAAQ,KACzB,YAAaA,EAAM,QAAQ,YAC3B,SAAUA,EAAM,QAAQ,QAC1B,CAAC,EAGDA,EAAM,aACH,SAAY,CACX,GAAI,CAEF,IAAMI,EAAQ,MAAMH,EAAI,aAAaC,CAAQ,EAC7C,OAAIE,GACF,QAAQ,IAAI,iCAAkCJ,EAAM,QAAQ,GAAG,EACxD,IAAI,SAASI,EAAM,MAAO,CAC/B,QAAS,CACP,eAAgBA,EAAM,MAAQ,YAChC,CACF,CAAC,IAED,QAAQ,IAAI,yBAA0BJ,EAAM,QAAQ,GAAG,EAChD,MAAMA,EAAM,OAAO,EAE9B,OAASK,EAAO,CACd,eAAQ,MAAM,0BAA2BA,CAAK,EACvC,MAAML,EAAM,OAAO,CAC5B,CACF,GAAG,CACL,EACF,CAAC",
  "names": ["ASSIGNMENTS_BASE_PREFIX", "IDB_OPTIONS", "IDBStore", "options", "resolve", "reject", "request", "event", "db", "key", "value", "idb", "IDBStore", "IDB_OPTIONS", "event", "idb", "pathname", "ASSIGNMENTS_BASE_PREFIX", "value", "error"]
}
