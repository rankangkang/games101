(()=>{var u="/games101",g=`${u}/sw.js`,d=`${u}/_assignments`,p={name:"games101",storeName:"games101_assignments_storage",version:1};var c=class{db=null;name;storeName;version;constructor(t){this.name=t.name,this.storeName=t.storeName,this.version=t.version}async getDB(){return this.db?this.db:new Promise((t,s)=>{let e=indexedDB.open(this.name,this.version);e.onerror=()=>s(e.error),e.onsuccess=()=>{this.db=e.result,t(e.result)},e.onupgradeneeded=n=>{let a=n.target.result;a.objectStoreNames.contains(this.storeName)||a.createObjectStore(this.storeName)}})}async setItem(t,s){let e=await this.getDB();return new Promise((n,a)=>{let l=e.transaction(this.storeName,"readwrite").objectStore(this.storeName).put(s,t);l.onerror=()=>a(l.error),l.onsuccess=()=>n()})}async getItem(t){let s=await this.getDB();return new Promise((e,n)=>{let i=s.transaction(this.storeName,"readonly").objectStore(this.storeName).get(t);i.onerror=()=>n(i.error),i.onsuccess=()=>e(i.result)})}async removeItem(t){let s=await this.getDB();return new Promise((e,n)=>{let i=s.transaction(this.storeName,"readwrite").objectStore(this.storeName).delete(t);i.onerror=()=>n(i.error),i.onsuccess=()=>e()})}async clear(){let t=await this.getDB();return new Promise((s,e)=>{let o=t.transaction(this.storeName,"readwrite").objectStore(this.storeName).clear();o.onerror=()=>e(o.error),o.onsuccess=()=>s()})}async keys(){let t=await this.getDB();return new Promise((s,e)=>{let o=t.transaction(this.storeName,"readonly").objectStore(this.storeName).getAllKeys();o.onerror=()=>e(o.error),o.onsuccess=()=>s(o.result)})}async setFileModel(t,s){return this.setItem(t,s)}async getFileModel(t){return this.getItem(t)}};var m=new c(p);self.addEventListener("install",r=>{console.log("Service Worker installed"),r.waitUntil(m.getDB().then(()=>{console.log("service worker db init success")}))});self.addEventListener("activate",r=>{console.log("Service Worker activated"),r.waitUntil(self.clients.claim())});self.addEventListener("fetch",r=>{if(r.request.method!=="GET")return;let s=new URL(r.request.url).pathname;s.startsWith(d)&&(console.log("Service Worker intercepted request",{url:r.request.url,pathname:s,clientId:r.clientId,frameType:r.request.mode,destination:r.request.destination,referrer:r.request.referrer}),r.respondWith((async()=>{try{let e=await m.getFileModel(s);return e?(console.log("Returning cached response for:",r.request.url),new Response(e.value,{headers:{"Content-Type":e.type||"text/plain"}})):(console.log("Fetching from network:",r.request.url),fetch(r.request))}catch(e){return console.error("Error in fetch handler:",e),fetch(r.request)}})()))});})();
//# sourceMappingURL=sw.js.map
